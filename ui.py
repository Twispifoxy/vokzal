from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QComboBox, QLineEdit, QPushButton, QAbstractItemView, QInputDialog, QFormLayout,
    QTableWidget, QTableWidgetItem, QHBoxLayout, QVBoxLayout, QWidget, QMessageBox, QHeaderView, QDialog,
    QDialogButtonBox, QDateTimeEdit, QLabel, QSpinBox
)
from PyQt6.QtGui import QFont, QIntValidator, QRegularExpressionValidator
from PyQt6.QtCore import QRegularExpression, QDateTime
import psycopg2
import json

from fpdf import FPDF
import os

class App(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Database Manager")
        self.setGeometry(100, 100, 1200, 600)

        with open("table_metadata.json", "r", encoding="utf-8") as file:
            self.metadata = json.load(file)

        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à—Ä–∏—Ñ—Ç–∞ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        app_font = QFont("Arial", 12)
        QApplication.setFont(app_font)

        self.db_connection = None
        self.cursor = None
        self.current_table = None
        self.sort_order = {}

        self.setup_ui()
        self.connect_to_database()

    def setup_ui(self):
        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –í—ã–±–æ—Ä —Ç–∞–±–ª–∏—Ü—ã
        self.table_selector = QComboBox()
        self.table_selector.currentIndexChanged.connect(self.load_table_data)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
        add_record_button = QPushButton("–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ —Ç–∞–±–ª–∏—Ü—É")
        add_record_button.clicked.connect(self.open_add_record_form)

        # –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞
        self.search_field = QLineEdit()
        self.search_field.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞...")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∏—Å–∫–∞
        search_button = QPushButton("–ù–∞–π—Ç–∏")
        search_button.clicked.connect(self.search_records)

        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.table_widget = QTableWidget()
        self.table_widget.setColumnCount(0)
        self.table_widget.setRowCount(0)
        self.table_widget.setEditTriggers(QAbstractItemView.EditTrigger.NoEditTriggers)

        # –ö–Ω–æ–ø–∫–∞ "–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç"
        generate_report_button = QPushButton("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        generate_report_button.setStyleSheet("position: absolute; bottom: 20px; right: 20px;")
        generate_report_button.clicked.connect(self.open_report_dialog)

        # Layout
        top_layout = QHBoxLayout()
        top_layout.addWidget(self.table_selector)
        top_layout.addStretch(1)
        top_layout.addWidget(add_record_button)
        top_layout.addStretch(1)
        top_layout.addWidget(self.search_field)
        top_layout.addWidget(search_button)

        main_layout = QVBoxLayout()
        main_layout.addLayout(top_layout)
        main_layout.addWidget(self.table_widget)
        main_layout.addWidget(generate_report_button)

        central_widget.setLayout(main_layout)

    def connect_to_database(self):
        try:
            self.db_connection = psycopg2.connect(
                dbname="vokzal",
                user="postgres",
                password="pass",
                host="localhost",
                port=5432
            )
            self.cursor = self.db_connection.cursor()
            self.load_table_names()
        except psycopg2.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:\n{e}")
            self.close()

    def load_table_names(self):
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü –∏–∑ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
            table_names = self.metadata.keys()

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞–±–ª–∏—Ü
            self.table_selector.clear()

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏–∑ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö –≤ –≤–∏–¥–∂–µ—Ç –≤—ã–±–æ—Ä–∞
            for table_name in table_names:
                self.table_selector.addItem(table_name)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–±–ª–∏—Ü", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü:\n{e}")

    def load_rows(self, rows, column_names):
        # –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        self.table_widget.clearContents()
        self.table_widget.setRowCount(0)
        self.table_widget.setColumnCount(0)  # –û–±–Ω—É–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
        self.table_widget.setColumnCount(len(column_names) + 1)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.table_widget.setHorizontalHeaderLabels(column_names + ['–î–µ–π—Å—Ç–≤–∏—è'])

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é —à–∏—Ä–∏–Ω—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        self.table_widget.setColumnWidth(len(column_names), 80)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        for col_idx in range(len(column_names)):
            self.table_widget.horizontalHeader().setSectionResizeMode(col_idx, QHeaderView.ResizeMode.Stretch)

        # –í–∫–ª—é—á–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã
        self.table_widget.setSortingEnabled(True)

        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü—É –∏ –∫–Ω–æ–ø–∫–∏
        for row_idx, row_data in enumerate(rows):
            self.table_widget.insertRow(row_idx)  # –í—Å—Ç–∞–≤–∫–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
            for col_idx, cell_data in enumerate(row_data):
                self.table_widget.setItem(row_idx, col_idx, QTableWidgetItem(str(cell_data)))

            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ (–∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–π —è—á–µ–π–∫–µ)
            action_widget = QWidget()

            # –ö–Ω–æ–ø–∫–∏ –≤ –≤–∏–¥–µ —Å–º–∞–π–ª–∏–∫–æ–≤
            edit_button = QPushButton("‚úèÔ∏è")  # –°–º–∞–π–ª–∏–∫ –¥–ª—è "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
            delete_button = QPushButton("üóëÔ∏è")  # –°–º–∞–π–ª–∏–∫ –¥–ª—è "–£–¥–∞–ª–∏—Ç—å"

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫
            edit_button.setFixedSize(30, 30)
            delete_button.setFixedSize(30, 30)

            # –†–∞—Å–ø–æ–ª–∞–≥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ
            action_layout = QHBoxLayout(action_widget)
            action_layout.addWidget(edit_button)
            action_layout.addWidget(delete_button)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ —è—á–µ–π–∫—É —Ç–∞–±–ª–∏—Ü—ã
            self.table_widget.setCellWidget(row_idx, len(column_names), action_widget)

            # –°–≤—è–∑—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏—è —Å –∫–Ω–æ–ø–∫–∞–º–∏
            edit_button.clicked.connect(lambda _, row=dict(zip(column_names, row_data)): self.edit_record(row))
            delete_button.clicked.connect(lambda _, row=dict(zip(column_names, row_data)): self.delete_record(row))

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫–∏
            self.table_widget.setRowHeight(row_idx, 40)

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–ª–∏–∫–∞ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É —Ç–∞–±–ª–∏—Ü—ã
        self.table_widget.horizontalHeader().sectionClicked.connect(self.sort_table)

    def load_table_data(self):
        self.current_table = self.table_selector.currentText()
        if not self.current_table:
            return

        try:
            query = f"SELECT * FROM {self.current_table}"
            self.cursor.execute(query)
            rows = self.cursor.fetchall()
            column_names = [desc[0] for desc in self.cursor.description]

            self.load_rows(rows, column_names)

        except psycopg2.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã:\n{e}")

    def sort_table(self, index):
        if index in self.sort_order:
            # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —É–∂–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, –º–µ–Ω—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
            self.sort_order[index] = not self.sort_order[index]
        else:
            # –ï—Å–ª–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –µ—â–µ –Ω–µ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞, —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é
            self.sort_order = {key: False for key in self.sort_order}  # –°–±—Ä–æ—Å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            self.sort_order[index] = True  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–æ–ª–±—Ü–∞

    def open_add_record_form(self):
        try:
            meta = self.metadata[self.current_table]
            fields = meta["fields"]
        except KeyError:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{self.current_table}'!")
            return

        dialog = QDialog(self)
        dialog.setWindowTitle(f"–î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ {self.current_table}")
        layout = QFormLayout(dialog)

        input_fields = {}
        input_types = {}
        for field, details in fields.items():
            input_type = details.get("input_type", "text")
            input_types[field] = input_type

            if input_type == "dropdown":
                combo_box = QComboBox()
                source_table = details["source_table"]
                source_column = details["source_column"]
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–ø–∞–¥–∞—é—â–µ–≥–æ —Å–ø–∏—Å–∫–∞
                query = f"SELECT {source_column} FROM {source_table}"
                self.cursor.execute(query)
                values = [str(row[0]) for row in self.cursor.fetchall()]
                combo_box.addItems(values)
                layout.addRow(f"{details['description']} ({field}):", combo_box)
                input_fields[field] = combo_box
            elif input_type == "datetime":
                date_edit = QDateTimeEdit()
                date_edit.setCalendarPopup(True)
                layout.addRow(f"{details['description']} ({field}):", date_edit)
                input_fields[field] = date_edit
            elif input_type == "number":
                line_edit = QLineEdit()
                line_edit.setValidator(QIntValidator())
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit
            elif input_type == "staff_inn":
                line_edit = QLineEdit()
                line_edit.setValidator(QRegularExpressionValidator(QRegularExpression("\\d{12}")))
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit
            elif input_type == "station_inn":
                line_edit = QLineEdit()
                line_edit.setValidator(QRegularExpressionValidator(QRegularExpression("\\d{10}")))
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit
            elif input_type == "gender_dropdown":
                combo_box = QComboBox()
                combo_box.addItems(["M", "F"])
                layout.addRow(f"{details['description']} ({field}):", combo_box)
                input_fields[field] = combo_box
            elif input_type == "text":
                line_edit = QLineEdit()
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ brigade_routes
        if self.current_table == "brigade_routes":
            staff_count_input = QLineEdit("0")
            staff_count_input.setValidator(QIntValidator(0, 100))
            layout.addRow("–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–≤ —Ç–∞–±–ª–∏—Ü—É staff):", staff_count_input)
            input_fields["staff_count"] = staff_count_input

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.submit_add_record(dialog, input_fields, input_types))
        button_box.rejected.connect(dialog.reject)
        layout.addWidget(button_box)

        dialog.exec()

    def submit_add_record(self, dialog, input_fields, input_types):
        data = {}
        staff_count = 0

        for field, widget in input_fields.items():
            input_type = input_types.get(field, "text")  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –ø–æ–ª—è
            if isinstance(widget, QComboBox):
                value = widget.currentText().strip()
            elif isinstance(widget, QDateTimeEdit):
                value = widget.dateTime().toString("yyyy-MM-dd HH:mm:ss")
            else:
                value = widget.text().strip()

            if not value:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ü–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
                return

            if input_type == "staff_inn" and (len(value) != 12 or not value.isdigit()):
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–ù–ù —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä!")
                return
            elif input_type == "station_inn" and (len(value) != 10 or not value.isdigit()):
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–ù–ù —Å—Ç–∞–Ω—Ü–∏–∏ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 10 —Ü–∏—Ñ—Ä!")
                return

            data[field] = value

        if "staff_count" in data:
            staff_count = int(data["staff_count"])
            del data["staff_count"]

        try:
            self.add_record(data)

            brigade_name = data.get("brigade_name", "")
            for i in range(1, staff_count + 1):
                self.open_add_staff_form(i, [brigade_name])

            self.load_table_data()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{e}")

    def add_record(self, data):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
            meta = self.metadata[self.current_table]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            table_name = meta.get("main_table", self.current_table)
            fields_str = ", ".join(data.keys())
            placeholders = ", ".join(["%s"] * len(data))
            insert_query = f"INSERT INTO {table_name} ({fields_str}) VALUES ({placeholders})"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(insert_query, tuple(data.values()))
            self.db_connection.commit()

        except psycopg2.Error as e:
            self.db_connection.rollback()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n{e}")

    def open_add_staff_form(self, staff_index, brigade_name):
        try:
            meta = self.metadata["staff_details"]
            fields = meta["fields"]
        except KeyError:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã 'staff_details'!")
            return

        dialog = QDialog(self)
        dialog.setWindowTitle(f"–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {staff_index}")
        layout = QFormLayout(dialog)

        input_fields = {}
        for field, details in fields.items():
            input_type = details.get("input_type", "text")

            if input_type == "dropdown":
                combo_box = QComboBox()
                if field == "brigade_name":
                    combo_box.addItems(brigade_name)
                else:
                    source_table = details["source_table"]
                    source_column = details["source_column"]
                    query = f"SELECT {source_column} FROM {source_table}"
                    self.cursor.execute(query)
                    values = [str(row[0]) for row in self.cursor.fetchall()]
                    combo_box.addItems(values)
                layout.addRow(f"{details['description']} ({field}):", combo_box)
                input_fields[field] = combo_box
            elif input_type == "datetime":
                date_edit = QDateTimeEdit()
                date_edit.setCalendarPopup(True)
                layout.addRow(f"{details['description']} ({field}):", date_edit)
                input_fields[field] = date_edit
            elif input_type == "number":
                line_edit = QLineEdit()
                line_edit.setValidator(QIntValidator())
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit
            elif input_type == "staff_inn":
                line_edit = QLineEdit()
                line_edit.setValidator(QRegularExpressionValidator(QRegularExpression("\\d{12}")))
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit
            elif input_type == "gender_dropdown":
                combo_box = QComboBox()
                combo_box.addItems(["M", "F"])
                layout.addRow(f"{details['description']} ({field}):", combo_box)
                input_fields[field] = combo_box
            elif input_type == "text":
                line_edit = QLineEdit()
                layout.addRow(f"{details['description']} ({field}):", line_edit)
                input_fields[field] = line_edit

        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.submit_add_staff(dialog, input_fields, staff_index))
        button_box.rejected.connect(dialog.reject)
        layout.addWidget(button_box)

        dialog.exec()

    def submit_add_staff(self, dialog, input_fields, staff_index):
        data = {}
        for field, widget in input_fields.items():
            if isinstance(widget, QComboBox):
                value = widget.currentText().strip()
            elif isinstance(widget, QDateTimeEdit):
                value = widget.dateTime().toString("yyyy-MM-dd HH:mm:ss")
            else:
                value = widget.text().strip()

            if not value:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ü–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
                return

            if field == "inn" and len(value) != 12:
                QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", "–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ä–æ–≤–Ω–æ 12 —Ü–∏—Ñ—Ä!")
                return

            data[field] = value

        try:
            self.add_staff(data)
            QMessageBox.information(dialog, "–£—Å–ø–µ—Ö", f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {staff_index} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ {staff_index}: {e}")

    def add_staff(self, data):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON
            meta = self.metadata["staff_details"]

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –æ—Å–Ω–æ–≤–Ω—É—é —Ç–∞–±–ª–∏—Ü—É
            table_name = meta.get("main_table", "staff_details")
            fields_str = ", ".join(data.keys())
            placeholders = ", ".join(["%s"] * len(data))
            insert_query = f"INSERT INTO {table_name} ({fields_str}) VALUES ({placeholders})"

            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
            self.cursor.execute(insert_query, tuple(data.values()))
            self.db_connection.commit()

        except psycopg2.Error as e:
            self.db_connection.rollback()
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:\n{e}")

    def edit_record(self, row_data):
        try:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
            meta = self.metadata[self.current_table]
            fields = meta["fields"]

            dialog = QDialog(self)
            dialog.setWindowTitle(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ {self.current_table}")
            layout = QFormLayout(dialog)

            input_fields = {}

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
            for field, details in fields.items():
                input_type = details.get("input_type", "text")
                current_value = row_data.get(field, "")

                if input_type == "dropdown":
                    combo_box = QComboBox()
                    source_table = details["source_table"]
                    source_column = details["source_column"]
                    query = f"SELECT {source_column} FROM {source_table}"
                    self.cursor.execute(query)
                    values = [str(row[0]) for row in self.cursor.fetchall()]
                    combo_box.addItems(values)
                    combo_box.setCurrentText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", combo_box)
                    input_fields[field] = combo_box
                elif input_type == "datetime":
                    date_edit = QDateTimeEdit()
                    date_edit.setCalendarPopup(True)
                    if current_value:
                        date_edit.setDateTime(QDateTime.fromString(current_value, "yyyy-MM-dd HH:mm:ss"))
                    layout.addRow(f"{details['description']} ({field}):", date_edit)
                    input_fields[field] = date_edit
                elif input_type == "number":
                    line_edit = QLineEdit()
                    line_edit.setValidator(QIntValidator())
                    line_edit.setText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", line_edit)
                    input_fields[field] = line_edit
                elif input_type == "staff_inn":
                    line_edit = QLineEdit()
                    line_edit.setValidator(QRegularExpressionValidator(QRegularExpression("\\d{12}")))
                    line_edit.setText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", line_edit)
                    input_fields[field] = line_edit
                elif input_type == "station_inn":
                    line_edit = QLineEdit()
                    line_edit.setValidator(QRegularExpressionValidator(QRegularExpression("\\d{10}")))
                    line_edit.setText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", line_edit)
                    input_fields[field] = line_edit
                elif input_type == "gender_dropdown":
                    combo_box = QComboBox()
                    combo_box.addItems(["M", "F"])
                    combo_box.setCurrentText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", combo_box)
                    input_fields[field] = combo_box
                elif input_type == "text":
                    line_edit = QLineEdit()
                    line_edit.setText(str(current_value))
                    layout.addRow(f"{details['description']} ({field}):", line_edit)
                    input_fields[field] = line_edit

            button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
            button_box.accepted.connect(lambda: self.submit_edit_record(dialog, row_data, input_fields))
            button_box.rejected.connect(dialog.reject)
            layout.addWidget(button_box)

            dialog.exec()

        except KeyError:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã '{self.current_table}'!")

    def submit_edit_record(self, dialog, row_data, input_fields):
        try:
            new_data = {}

            # –°–±–æ—Ä –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–æ—Ä–º—ã
            for field, widget in input_fields.items():
                if isinstance(widget, QComboBox):
                    value = widget.currentText().strip()
                elif isinstance(widget, QDateTimeEdit):
                    value = widget.dateTime().toString("yyyy-MM-dd HH:mm:ss")
                else:
                    value = widget.text().strip()

                if not value:
                    QMessageBox.warning(dialog, "–û—à–∏–±–∫–∞", f"–ü–æ–ª–µ '{field}' –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ!")
                    return

                new_data[field] = value

            # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –∑–∞–ø–∏—Å–∏
            self.delete_record(row_data)

            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            self.add_record(new_data)

            self.load_table_data()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(dialog, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å:\n{e}")

    def delete_record(self, row_data):
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–ª—é—á–µ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã –∏–∑ –º–µ—Ç–∞-–¥–∞–Ω–Ω—ã—Ö
            table_name = self.metadata[self.current_table]["delete_map"]["table"]
            key_columns = self.metadata[self.current_table]["delete_map"]["keys"]  # –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π

            # –§–æ—Ä–º–∏—Ä—É–µ–º —É—Å–ª–æ–≤–∏–µ WHERE —Å —É—á–µ—Ç–æ–º –≤—Å–µ—Ö –∫–ª—é—á–µ–π
            where_clause = " AND ".join([f"{key} = %s" for key in key_columns])
            key_values = [row_data.get(key) for key in key_columns]  # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–ª—é—á–µ–π –∏–∑ —Å—Ç—Ä–æ–∫–∏

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
            if None in key_values:
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∏!")
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º SQL-–∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
            query = f"DELETE FROM {table_name} WHERE {where_clause}"
            self.cursor.execute(query, key_values)
            self.db_connection.commit()

            self.load_table_data()
            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å: {e}")


    def search_records(self):
        search_query = self.search_field.text()
        if not search_query or not self.current_table:
            self.load_table_data()
            return

        try:
            # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –ø–æ–ª—è–º —Ç–∞–±–ª–∏—Ü—ã
            query = f"SELECT * FROM {self.current_table} WHERE " + " OR ".join(
                [f"CAST({col[0]} AS TEXT) ILIKE %s" for col in self.cursor.description]
            )
            search_pattern = f"%{search_query}%"
            self.cursor.execute(query, [search_pattern] * len(self.cursor.description))

            rows = self.cursor.fetchall()

            column_names = [desc[0] for desc in self.cursor.description]

            self.load_rows(rows, column_names)

        except psycopg2.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫:\n{e}")

    def get_column_names(self):
        if not self.current_table:
            return []
        self.cursor.execute(f"SELECT * FROM {self.current_table} LIMIT 1")
        return [desc[0] for desc in self.cursor.description]

    def open_report_dialog(self):
        # –û–∫–Ω–æ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
        dialog = QDialog(self)
        dialog.setWindowTitle("–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")

        report_type_label = QLabel("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç:")
        self.report_type_combobox = QComboBox()
        self.report_type_combobox.addItems([
            "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤",
            "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤",
            "–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥"
        ])

        # –ö–Ω–æ–ø–∫–∞ "OK" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.open_selected_report(dialog))
        button_box.rejected.connect(dialog.reject)

        layout = QFormLayout()
        layout.addRow(report_type_label, self.report_type_combobox)
        layout.addWidget(button_box)
        dialog.setLayout(layout)

        dialog.exec()

    def open_selected_report(self, parent_dialog):
        # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∏–ø –æ—Ç—á–µ—Ç–∞
        selected_report = self.report_type_combobox.currentText()

        # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –æ–∫–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ—Ç—á–µ—Ç–∞
        if selected_report == "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏ –¥–ª—è –º–∞—Ä—à—Ä—É—Ç–æ–≤":
            self.open_route_report_dialog(parent_dialog)
        elif selected_report == "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤":
            self.open_popular_directions_report_dialog(parent_dialog)
        elif selected_report == "–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥":
            self.open_brigade_usage_report_dialog(parent_dialog)

    def open_route_report_dialog(self, parent_dialog):
        parent_dialog.accept()

        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤ –ø—É—Ç–∏")

        # –í–æ–∫–∑–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        station_label = QLabel("–í–æ–∫–∑–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        self.station_combobox = QComboBox()
        self.get_station_names()

        # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        date_range_label = QLabel("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        self.start_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        self.end_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.end_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_label = QLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
        self.sort_combobox = QComboBox()
        self.sort_combobox.addItems(["ASC", "DESC"])

        # –ö–Ω–æ–ø–∫–∏
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.generate_route_report(dialog))
        button_box.rejected.connect(dialog.reject)

        # Layout
        layout = QFormLayout()
        layout.addRow(station_label, self.station_combobox)
        layout.addRow(date_range_label, self.start_date_edit)
        layout.addRow("", self.end_date_edit)
        layout.addRow(sort_label, self.sort_combobox)
        layout.addWidget(button_box)
        dialog.setLayout(layout)

        dialog.exec()

    def get_station_names(self):
        try:
            query = "SELECT name FROM stations"
            self.cursor.execute(query)
            stations = self.cursor.fetchall()
            for station in stations:
                self.station_combobox.addItem(station[0])  # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∫–∑–∞–ª –≤ —Å–ø–∏—Å–æ–∫
        except psycopg2.Error as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–∫–∑–∞–ª–æ–≤", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–æ–∫–∑–∞–ª—ã:\n{e}")

    def generate_route_report(self, dialog):
        departure_station = self.station_combobox.currentText()
        start_date = self.start_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        end_date = self.end_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        sort_order = self.sort_combobox.currentText()

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
        query = f"""
        SELECT 
            s1.name AS departure_station,
            s2.name AS arrival_station,
            ROUND(AVG(EXTRACT(EPOCH FROM (r.arrival_time - r.departure_time)) / 3600), 2) AS avg_travel_time_hours,
            COUNT(*) AS route_count
        FROM 
            routes r
        JOIN stations s1 ON r.departure_station_code = s1.station_code
        JOIN stations s2 ON r.arrival_station_code = s2.station_code
        WHERE 
            r.departure_time BETWEEN %s AND %s
            AND s1.name = %s
        GROUP BY 
            s1.name, s2.name
        ORDER BY 
            avg_travel_time_hours {sort_order};
        """

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.cursor.execute(query, (start_date, end_date, departure_station))
            report_data = self.cursor.fetchall()

            if not report_data:
                QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
            pdf_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "route_report.pdf")
            self.create_route_pdf(report_data, pdf_file_path)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            QMessageBox.information(self, "–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_file_path}")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç:\n{e}")

    def create_route_pdf(self, data, file_path):
        pdf = FPDF()
        pdf.add_page()

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —à—Ä–∏—Ñ—Ç–æ–≤
        font_dir = os.path.join(os.path.dirname(__file__), "fonts")
        regular_font_path = os.path.join(font_dir, "timesnrcyrmt.ttf")
        bold_font_path = os.path.join(font_dir, "timesnrcyrmt_bold.ttf")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        pdf.add_font("TimesNewRoman", style="", fname=regular_font_path, uni=True)
        pdf.add_font("TimesNewRoman", style="B", fname=bold_font_path, uni=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        pdf.set_font("TimesNewRoman", size=12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font("TimesNewRoman", style="B", size=16)
        pdf.cell(0, 10, "–û—Ç—á–µ—Ç –ø–æ –º–∞—Ä—à—Ä—É—Ç–∞–º", ln=True, align="C")
        pdf.ln(10)  # –û—Ç—Å—Ç—É–ø

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", style="B", size=12)
        column_headers = ["–í–æ–∫–∑–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–í–æ–∫–∑–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è", "–°—Ä–µ–¥. –≤—Ä–µ–º—è (—á)", "–ö–æ–ª-–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤"]
        column_widths = [50, 50, 40, 40]

        for i, header in enumerate(column_headers):
            pdf.cell(column_widths[i], 10, header, border=1, align="C")
        pdf.ln()

        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", size=12)
        for row in data:
            for i, cell in enumerate(row):
                pdf.cell(column_widths[i], 10, str(cell), border=1, align="C")
            pdf.ln()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            pdf.output(file_path)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def open_popular_directions_report_dialog(self, parent_dialog):
        parent_dialog.accept()

        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞: –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤")

        # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        date_range_label = QLabel("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        self.start_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        self.end_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.end_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_label = QLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
        self.sort_combobox = QComboBox()
        self.sort_combobox.addItems(["–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä—à—Ä—É—Ç–æ–≤", "–ü–æ –æ–±—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—É—Ç–∏"])

        # –ö–Ω–æ–ø–∫–∏
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.generate_popular_directions_report(dialog))
        button_box.rejected.connect(dialog.reject)

        # Layout
        layout = QFormLayout()
        layout.addRow(date_range_label, self.start_date_edit)
        layout.addRow("", self.end_date_edit)
        layout.addRow(sort_label, self.sort_combobox)
        layout.addWidget(button_box)
        dialog.setLayout(layout)

        dialog.exec()

    def generate_popular_directions_report(self, dialog):
        start_date = self.start_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        end_date = self.end_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        sort_order = "route_count DESC, total_travel_time_hours DESC" if self.sort_combobox.currentText() == "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä—à—Ä—É—Ç–æ–≤" else "total_travel_time_hours DESC, route_count DESC"

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
        query = f"""
        SELECT 
            s1.name AS departure_station,
            s2.name AS arrival_station,
            COUNT(r.route_code) AS route_count,
            ROUND(SUM(EXTRACT(EPOCH FROM (r.arrival_time - r.departure_time))) / 3600, 2) AS total_travel_time_hours
        FROM 
            routes r
        JOIN stations s1 ON r.departure_station_code = s1.station_code
        JOIN stations s2 ON r.arrival_station_code = s2.station_code
        WHERE 
            r.departure_time BETWEEN %s AND %s
        GROUP BY 
            s1.name, s2.name
        ORDER BY 
            {sort_order};
        """

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.cursor.execute(query, (start_date, end_date))
            report_data = self.cursor.fetchall()

            if not report_data:
                QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
            pdf_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "popular_directions_report.pdf")
            self.create_popular_routes_pdf(report_data, pdf_file_path)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            QMessageBox.information(self, "–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_file_path}")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç:\n{e}")

    def create_popular_routes_pdf(self, data, file_path):
        pdf = FPDF()
        pdf.add_page()

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —à—Ä–∏—Ñ—Ç–æ–≤
        font_dir = os.path.join(os.path.dirname(__file__), "fonts")
        regular_font_path = os.path.join(font_dir, "timesnrcyrmt.ttf")
        bold_font_path = os.path.join(font_dir, "timesnrcyrmt_bold.ttf")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        pdf.add_font("TimesNewRoman", style="", fname=regular_font_path, uni=True)
        pdf.add_font("TimesNewRoman", style="B", fname=bold_font_path, uni=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        pdf.set_font("TimesNewRoman", size=12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font("TimesNewRoman", style="B", size=16)
        pdf.cell(0, 10, "–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤", ln=True, align="C")
        pdf.ln(10)  # –û—Ç—Å—Ç—É–ø

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", style="B", size=12)
        column_headers = ["–í–æ–∫–∑–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è", "–í–æ–∫–∑–∞–ª –ø—Ä–∏–±—ã—Ç–∏—è", "–ö–æ–ª-–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤", "–û–±—â–µ–µ –≤—Ä–µ–º—è (—á)"]
        column_widths = [50, 50, 40, 50]

        for i, header in enumerate(column_headers):
            pdf.cell(column_widths[i], 10, header, border=1, align="C")
        pdf.ln()

        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", size=12)
        for row in data:
            for i, cell in enumerate(row):
                pdf.cell(column_widths[i], 10, str(cell), border=1, align="C")
            pdf.ln()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            pdf.output(file_path)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def open_brigade_usage_report_dialog(self, parent_dialog):
        parent_dialog.accept()

        dialog = QDialog(self)
        dialog.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç—á–µ—Ç–∞: –ò—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥")

        # –î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        date_range_label = QLabel("–î–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:")
        self.start_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.start_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")
        self.end_date_edit = QDateTimeEdit(QDateTime.currentDateTime())
        self.end_date_edit.setDisplayFormat("yyyy-MM-dd HH:mm:ss")

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        min_experience_label = QLabel("–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å—Ç–∞–∂ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:")
        self.min_experience_edit = QSpinBox()
        self.min_experience_edit.setMinimum(0)
        self.min_experience_edit.setMaximum(100)
        self.min_experience_edit.setValue(0)

        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        sort_label = QLabel("–°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
        self.sort_combobox = QComboBox()
        self.sort_combobox.addItems(["–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä—à—Ä—É—Ç–æ–≤", "–ü–æ —Å—Ä–µ–¥–Ω–µ–º—É —Å—Ç–∞–∂—É"])

        # –ö–Ω–æ–ø–∫–∏
        button_box = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok | QDialogButtonBox.StandardButton.Cancel)
        button_box.accepted.connect(lambda: self.generate_brigade_usage_report(dialog))
        button_box.rejected.connect(dialog.reject)

        # Layout
        layout = QFormLayout()
        layout.addRow(date_range_label, self.start_date_edit)
        layout.addRow("", self.end_date_edit)
        layout.addRow(min_experience_label, self.min_experience_edit)
        layout.addRow(sort_label, self.sort_combobox)
        layout.addWidget(button_box)
        dialog.setLayout(layout)

        dialog.exec()

    def generate_brigade_usage_report(self, dialog):
        start_date = self.start_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        end_date = self.end_date_edit.dateTime().toString("yyyy-MM-dd HH:mm:ss")
        min_experience = self.min_experience_edit.value()
        sort_order = "route_count DESC, avg_experience_years DESC" if self.sort_combobox.currentText() == "–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –º–∞—Ä—à—Ä—É—Ç–æ–≤" else "avg_experience_years DESC, route_count DESC"

        # –§–æ—Ä–º–∏—Ä—É–µ–º SQL –∑–∞–ø—Ä–æ—Å
        query = f"""
        SELECT 
            b.name AS brigade_name,
            COUNT(rb.route_code) AS route_count,
            ROUND(AVG(s.experience_years), 2) AS avg_experience_years
        FROM 
            route_brigades rb
        JOIN brigades b ON rb.brigade_code = b.brigade_code
        JOIN staff s ON s.brigade_code = b.brigade_code
        WHERE 
            s.experience_years >= %s
            AND rb.route_code IN (
                SELECT route_code 
                FROM routes 
                WHERE departure_time BETWEEN %s AND %s
            )
        GROUP BY 
            b.name
        ORDER BY 
            {sort_order};
        """

        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º SQL –∑–∞–ø—Ä–æ—Å —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.cursor.execute(query, (min_experience, start_date, end_date))
            report_data = self.cursor.fetchall()

            if not report_data:
                QMessageBox.warning(self, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö", "–î–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
                return

            # –°–æ–∑–¥–∞–µ–º PDF —Ñ–∞–π–ª
            pdf_file_path = os.path.join(os.path.expanduser("~"), "Desktop", "brigade_usage_report.pdf")
            self.create_brigade_usage_pdf(report_data, pdf_file_path)

            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
            QMessageBox.information(self, "–û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω", f"–û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á–µ–º —Å—Ç–æ–ª–µ:\n{pdf_file_path}")
            dialog.accept()
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç:\n{e}")

    def create_brigade_usage_pdf(self, data, file_path):
        pdf = FPDF()
        pdf.add_page()

        # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º —à—Ä–∏—Ñ—Ç–æ–≤
        font_dir = os.path.join(os.path.dirname(__file__), "fonts")
        regular_font_path = os.path.join(font_dir, "timesnrcyrmt.ttf")
        bold_font_path = os.path.join(font_dir, "timesnrcyrmt_bold.ttf")

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —à—Ä–∏—Ñ—Ç–æ–≤
        pdf.add_font("TimesNewRoman", style="", fname=regular_font_path, uni=True)
        pdf.add_font("TimesNewRoman", style="B", fname=bold_font_path, uni=True)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç
        pdf.set_font("TimesNewRoman", size=12)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        pdf.set_font("TimesNewRoman", style="B", size=16)
        pdf.cell(0, 10, "–ò—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç—å –±—Ä–∏–≥–∞–¥", ln=True, align="C")
        pdf.ln(10)  # –û—Ç—Å—Ç—É–ø

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", style="B", size=12)
        column_headers = ["–ù–∞–∑–≤–∞–Ω–∏–µ –±—Ä–∏–≥–∞–¥—ã", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ä—à—Ä—É—Ç–æ–≤", "–°—Ä–µ–¥–Ω–∏–π —Å—Ç–∞–∂ (–≥–æ–¥—ã)"]
        column_widths = [70, 50, 60]

        for i, header in enumerate(column_headers):
            pdf.cell(column_widths[i], 10, header, border=1, align="C")
        pdf.ln()

        # –î–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        pdf.set_font("TimesNewRoman", size=12)
        for row in data:
            for i, cell in enumerate(row):
                pdf.cell(column_widths[i], 10, str(cell), border=1, align="C")
            pdf.ln()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        try:
            pdf.output(file_path)
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª:\n{e}")

    def closeEvent(self, event):
        if self.cursor:
            self.cursor.close()
        if self.db_connection:
            self.db_connection.close()
        event.accept()
